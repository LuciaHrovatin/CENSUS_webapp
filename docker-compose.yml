# The code referring to the Airflow environment replicates
# the example proposed by the official documentation.
# https://airflow.apache.org/docs/apache-airflow/stable/docker-compose.yaml

version: '3'

x-airflow-common:
  &airflow-common
  image: apache/airflow:2.1.2
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: 'Dp1Kdz2mnj0QIJswTH41SLI_auwA9DhGY0-PArc8LCQ='
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__CORE__PARALLELISM: 64
    AIRFLOW__CORE__DAG_CONCURRENCY: 16
    AIRFLOW__SCHEDULER__PARSING_PROCESSES: 4
    AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS: 'true'
    AIRFLOW_CONN_MYSQL_TEST_CONN: mysql://root:password@172.17.0.1:3310/project_bdt
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:

  mysql:
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: "password"
      MYSQL_DATABASE: "project_bdt"
    ports:
      - 3310:3306

  phpmyadmin:
    image: phpmyadmin
    container_name: "myadmin"
    ports:
      - 8082:80
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=mysql
      - PMA_PORT=3306


  redis-ml:
    image: shaynativ/redis-ml
    container_name: "redis-ml"
    ports:
      - 6380:6379

  postgres:
    image: postgres:9.6
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      #- ./data/postgres:/var/lib/postgresql/data
      - ./data/postgres:/var/lib/postgresql/logs
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 15
    restart: always

  airflow-webserver:
    <<: *airflow-common
    container_name: "webserver"
    command: webserver
    ports:
      - 8080:8080
    environment:
      <<: *airflow-common-env
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/"]
      interval: 5s
      timeout: 5s
      retries: 4
    restart: always


  airflow-scheduler:
    <<: *airflow-common
    container_name: "scheduler"
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 5s
      timeout: 5s
      retries: 4
    restart: always


  airflow-worker:
    <<: *airflow-common
    container_name: "worker"
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 5s
      timeout: 5s
      retries: 4
    restart: always


  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 5s
      timeout: 5s
      retries: 4
    restart: always


  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
